package com.bw.miaoheng20200325.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bw.miaoheng20200325.Province;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROVINCE".
*/
public class ProvinceDao extends AbstractDao<Province, Void> {

    public static final String TABLENAME = "PROVINCE";

    /**
     * Properties of entity Province.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Province = new Property(0, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(1, String.class, "city", false, "CITY");
        public final static Property Country = new Property(2, String.class, "country", false, "COUNTRY");
    }


    public ProvinceDao(DaoConfig config) {
        super(config);
    }
    
    public ProvinceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROVINCE\" (" + //
                "\"PROVINCE\" TEXT," + // 0: province
                "\"CITY\" TEXT," + // 1: city
                "\"COUNTRY\" TEXT);"); // 2: country
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROVINCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Province entity) {
        stmt.clearBindings();
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(1, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(2, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(3, country);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Province entity) {
        stmt.clearBindings();
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(1, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(2, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(3, country);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Province readEntity(Cursor cursor, int offset) {
        Province entity = new Province( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // province
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // city
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // country
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Province entity, int offset) {
        entity.setProvince(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCity(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountry(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Province entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Province entity) {
        return null;
    }

    @Override
    public boolean hasKey(Province entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
